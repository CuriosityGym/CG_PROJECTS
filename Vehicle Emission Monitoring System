#include <ESP8266WiFi.h>
#include <ThingSpeak.h>
#include <Wire.h>

// Wi-Fi credentials
const char* ssid = "your_ssid";             // Replace with your Wi-Fi SSID
const char* password = "your_password";     // Replace with your Wi-Fi password

// ThingSpeak API credentials
unsigned long myChannelNumber = YOUR_CHANNEL_ID;           // Replace with your ThingSpeak channel ID
const char* myWriteAPIKey = "YOUR_WRITE_API_KEY";          // Replace with your ThingSpeak Write API key

// Alert field for email
unsigned long alertChannelNumber = YOUR_ALERT_CHANNEL_ID;  // Replace with your ThingSpeak alert channel ID
const char* alertWriteAPIKey = "YOUR_ALERT_WRITE_API_KEY"; // Replace with your ThingSpeak alert Write API key

// Pin assignments
const int mq2Pin = A0;           // MQ-2 sensor connected to A0
const int redLEDPin = D1;        // Red LED connected to D1 (Alert indicator)
const int greenLEDPin = D2;      // Green LED connected to D2 (Normal status indicator)

// Threshold for gas levels
const int threshold = 300;       // Gas level threshold, adjust based on calibration

WiFiClient client;

void setup() {
  Serial.begin(115200);          // Initialize serial communication at 115200 baud rate
  pinMode(mq2Pin, INPUT);        // Set MQ-2 sensor pin as input
  pinMode(redLEDPin, OUTPUT);    // Set red LED pin as output
  pinMode(greenLEDPin, OUTPUT);  // Set green LED pin as output
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");           // Print dots while connecting to Wi-Fi
  }
  Serial.println("Connected to WiFi");

  ThingSpeak.begin(client);      // Initialize ThingSpeak client
}

void loop() {
  int gasLevel = analogRead(mq2Pin);  // Read gas level from MQ-2 sensor
  Serial.print("Gas Level: ");
  Serial.println(gasLevel);

  // Update ThingSpeak with the gas level
  ThingSpeak.setField(1, gasLevel);                // Set the field value with the gas level
  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);  // Write the data to ThingSpeak
  Serial.println("Data updated to ThingSpeak.");   // Print confirmation message

  // Check if the gas level exceeds the threshold
  if (gasLevel > threshold) {
    digitalWrite(redLEDPin, HIGH);    // Turn on red LED if gas level is too high
    digitalWrite(greenLEDPin, LOW);   // Turn off green LED
    sendThingSpeakAlert(gasLevel);    // Send alert to ThingSpeak
  } else {
    digitalWrite(redLEDPin, LOW);     // Turn off red LED if gas level is normal
    digitalWrite(greenLEDPin, HIGH);  // Turn on green LED
  }

  delay(15000);  // Wait for 15 seconds before the next reading
}

void sendThingSpeakAlert(int gasLevel) {
  // Update ThingSpeak alert channel with the gas level
  ThingSpeak.setField(1, gasLevel);  // Set the field value with the gas level
  ThingSpeak.writeFields(alertChannelNumber, alertWriteAPIKey);  // Write the alert data to ThingSpeak
  Serial.println("Alert sent to ThingSpeak.");  // Print confirmation message
}
